Task description

A non-empty array A consisting of N integers is given.

A permutation is a sequence containing each element from 1 to N once, and only once.

For example, array A such that:
    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2

is a permutation, but array A such that:
    A[0] = 4
    A[1] = 1
    A[2] = 3

is not a permutation, because value 2 is missing.

The goal is to check whether array A is a permutation.

Write a function:

    def solution(A)

that, given an array A, returns 1 if array A is a permutation and 0 if it is not.

For example, given array A such that:
    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2

the function should return 1.

Given array A such that:
    A[0] = 4
    A[1] = 1
    A[2] = 3

the function should return 0.

Write an efficient algorithm for the following assumptions:

        N is an integer within the range [1..100,000];
        each element of array A is an integer within the range [1..1,000,000,000].

'''
Author   : Arda KÃ¼pelioÄŸlu
Date     : 24/05/2020
Task     : Codility
####################################################################
Input(s) :
N = is an integer within the range [1..100,000]
Output(s):
1 if the input is perm and 0 if not.
####################################################################
Strategy :
1)Count the numbers in the given array
2)See if any number is missing or not.
####################################################################
Score 100%
'''
def solution(A):
    # write your code in Python 3.6
    N = len(A)
    count = [0] * (N+1)
    
    if N >= 1 and N <= 100000:
    
        for i in range(N):
            
            try:
                count[A[i]] += 1
            except:
                return 0
                
        del count[0]
        
        if 0 in count:
            return 0
        else:
            return 1
            
    else:
        return 0
