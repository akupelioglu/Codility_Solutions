1. Nesting
Determine whether a given string of parentheses (single type) is properly nested.
Task Score
100%
Correctness
100%
Performance
100%
Task description
A string S consisting of N characters is called properly nested if:

S is empty;
S has the form "(U)" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, string "(()(())())" is properly nested but string "())" isn't.

Write a function:

def solution(S)

that, given a string S consisting of N characters, returns 1 if string S is properly nested and 0 otherwise.

For example, given S = "(()(())())", the function should return 1 and given S = "())", the function should return 0, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..1,000,000];
string S consists only of the characters "(" and/or ")".
Copyright 2009â€“2021 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.

def solution(S):
    # write your code in Python 3.6
    open_brac = "("
    close_brac = ")"
    N = len(S)
    if not 0<=N<=1000000: return 0
    if N == 0: return 1
    if S[0] == close_brac: return 0
    if S[-1] == open_brac: return 0
    if len(S)%2 != 0: return 0 

    stack = []
    for i in S:

        if len(stack) == 0 and i == close_brac:

            return 0

        elif len(stack) == 0 and i == open_brac:

            stack.append(i)

        elif stack[-1] != i:

            stack.pop()
        
        else:

            stack.append(i)
        
    if len(stack) != 0:
        return 0

    else:
        return 1
