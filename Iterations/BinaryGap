Task description

A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.

For example, number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap of length 1. The number 15 has binary representation 1111 and has no binary gaps. The number 32 has binary representation 100000 and has no binary gaps.

Write a function:

    def solution(N)

that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn't contain a binary gap.

For example, given N = 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. Given N = 32 the function should return 0, because N has binary representation '100000' and thus no binary gaps.

Write an efficient algorithm for the following assumptions:

        N is an integer within the range [1..2,147,483,647].



'''
Author   : Arda Küpelioğlu
Date     : 22/05/2020
Task     : Codility
####################################################################
Input(s) :
N = is an integer within the range [1..2,147,483,647]
Output(s):
Result = is an integer with value of the longest binary gap.
####################################################################
Strategy :
1)First convert to binary version
2)Second remove the "ob" print from the beginning
3)Get the index of 1s
4)Count and return the longest gap
####################################################################
Score 100%
'''
from collections import deque

def solution(N):
    # write your code in Python 3.6
    #First convert to binary version
    
    getbin = bin(N)
    
    #Second remove the "ob" print from the beginning
    getbin = getbin[2:]
    
    if len(getbin) <= 1: return 0
    if '0' not in getbin: return 0
    
    #Get the index of 1s
    my  = deque()
    my2 = deque()
    
    i= 0
    while i < len(getbin):
        
        if getbin[i] == '1':

            my.append(i)
    
        i += 1
    
    if len(my) <= 1: return 0
    
    #Count the longest gap
    ii = 0
    result = 0
    while ii < len(my)-1:
        
        result  = max(result ,my[ii+1] - my[ii] - 1)
    
        ii += 1
        
    return result
        

