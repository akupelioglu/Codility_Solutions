Task description

A non-empty array A consisting of N integers is given. Array A represents numbers on a tape.

Any integer P, such that 0 < P < N, splits this tape into two non-empty parts: A[0], A[1], ..., A[P − 1] and A[P], A[P + 1], ..., A[N − 1].

The difference between the two parts is the value of: |(A[0] + A[1] + ... + A[P − 1]) − (A[P] + A[P + 1] + ... + A[N − 1])|

In other words, it is the absolute difference between the sum of the first part and the sum of the second part.

For example, consider array A such that:
  A[0] = 3
  A[1] = 1
  A[2] = 2
  A[3] = 4
  A[4] = 3

We can split this tape in four places:

        P = 1, difference = |3 − 10| = 7
        P = 2, difference = |4 − 9| = 5
        P = 3, difference = |6 − 7| = 1
        P = 4, difference = |10 − 3| = 7

Write a function:

    def solution(A)

that, given a non-empty array A of N integers, returns the minimal difference that can be achieved.

For example, given:
  A[0] = 3
  A[1] = 1
  A[2] = 2
  A[3] = 4
  A[4] = 3

the function should return 1, as explained above.

Write an efficient algorithm for the following assumptions:

        N is an integer within the range [2..100,000];
        each element of array A is an integer within the range [−1,000..1,000]



'''
Author   : Arda Küpelioğlu
Date     : 24/05/2020
Task     : Codility
####################################################################
Input(s) :
N = is an integer within the range [2..100,000]
Output(s):
x = is an integer returns the minimal difference that can be achieved
####################################################################
Strategy :
1)The integer P adds to firstpart sum value and subtracts secondpart
sum value in each iteration through A
####################################################################
Score 100%
'''
def solution(A):
    # write your code in Python 3.6
    N = len(A)
    
    if N >= 2 and N <= 100000:
        
        firstpart = A[0]
        secondpart = sum(A[1:])
        x = abs(firstpart - secondpart)
        
        P = 1
        while P < N-1:
            
            firstpart += A[P]
            secondpart -= A[P]
            check = abs(firstpart - secondpart)
            x = min(x, check)
            P += 1
            
        return x
